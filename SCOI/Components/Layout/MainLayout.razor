@inherits LayoutComponentBase
@using Components
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
	<MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
		<MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="@( async (context) => await FileUploaded(context))" MaximumFileCount="1">
			<ButtonTemplate>
				<MudButton HtmlTag="label"
						   Variant="Variant.Filled"
						   Color="Color.Primary"
						   StartIcon="@Icons.Material.Filled.CloudUpload"
						   for="@context.Id">
					Залить фото
				</MudButton>
			</ButtonTemplate>
		</MudFileUpload>
		<MudButton Color="Color.Inherit">Экспорт</MudButton>
		<MudSpacer />
		<MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor" Target="_blank" />
	</MudAppBar>
	<MudDrawer @bind-Open="@open" Elevation="1">
		<MudDrawerHeader>
			<MudText Typo="Typo.h6">My App</MudText>
		</MudDrawerHeader>
		<MudNavMenu>
			<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Layers">Слои</MudNavLink>
			<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Grade">Градационные преобразования</MudNavLink>
			<MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AreaChart">Град. пр.</MudNavLink>
		</MudNavMenu>
	</MudDrawer>
	<MudMainContent Style="display:flex; flex-direction:column-reverse; height:99vh; margin:5px">
		<MudPaper Class="pa-16 ma-2" Elevation="3" Height="300px">
			
		</MudPaper>
		<MudPaper Class="pa-16 ma-2" Elevation="0" style="flex-grow:1">
			<div style="justify-content:space-between; display:flex">
				<MudImage Src=@imageSource Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4" />
				<MudImage Src=@imageSource Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4" />
			</div>
		</MudPaper>
		

	</MudMainContent>
</MudLayout>
@code {
	bool open = false;
	IBrowserFile file;
	string imageSource = "";

	void ToggleDrawer()
	{
		open = !open;
	}
	async Task FileUploaded(IBrowserFile uploadedFile)
	{
		file = uploadedFile;
		Stream stream = file.OpenReadStream();
		byte[] bytes;
		using (var memoryStream = new MemoryStream())
		{
			await stream.CopyToAsync(memoryStream);
			bytes = memoryStream.ToArray();
		}

		string base64 = Convert.ToBase64String(bytes);
		imageSource = string.Format("data:image/jpg;base64, {0}", base64);

	}


}